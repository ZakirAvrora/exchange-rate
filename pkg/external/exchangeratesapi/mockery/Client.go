// Code generated by mockery v2.20.0. DO NOT EDIT.

package mockery

import (
	context "context"

	exchangeratesapi "github.com/ZakirAvrora/exchange-rate/pkg/external/exchangeratesapi"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// GetLatestRate provides a mock function with given fields: ctx, base, target
func (_m *Client) GetLatestRate(ctx context.Context, base string, target string) (*exchangeratesapi.Rate, error) {
	ret := _m.Called(ctx, base, target)

	var r0 *exchangeratesapi.Rate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*exchangeratesapi.Rate, error)); ok {
		return rf(ctx, base, target)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *exchangeratesapi.Rate); ok {
		r0 = rf(ctx, base, target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exchangeratesapi.Rate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, base, target)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetLatestRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestRate'
type Client_GetLatestRate_Call struct {
	*mock.Call
}

// GetLatestRate is a helper method to define mock.On call
//   - ctx context.Context
//   - base string
//   - target string
func (_e *Client_Expecter) GetLatestRate(ctx interface{}, base interface{}, target interface{}) *Client_GetLatestRate_Call {
	return &Client_GetLatestRate_Call{Call: _e.mock.On("GetLatestRate", ctx, base, target)}
}

func (_c *Client_GetLatestRate_Call) Run(run func(ctx context.Context, base string, target string)) *Client_GetLatestRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Client_GetLatestRate_Call) Return(_a0 *exchangeratesapi.Rate, _a1 error) *Client_GetLatestRate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetLatestRate_Call) RunAndReturn(run func(context.Context, string, string) (*exchangeratesapi.Rate, error)) *Client_GetLatestRate_Call {
	_c.Call.Return(run)
	return _c
}

// GetSupportedCurrencies provides a mock function with given fields: ctx
func (_m *Client) GetSupportedCurrencies(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetSupportedCurrencies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSupportedCurrencies'
type Client_GetSupportedCurrencies_Call struct {
	*mock.Call
}

// GetSupportedCurrencies is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Client_Expecter) GetSupportedCurrencies(ctx interface{}) *Client_GetSupportedCurrencies_Call {
	return &Client_GetSupportedCurrencies_Call{Call: _e.mock.On("GetSupportedCurrencies", ctx)}
}

func (_c *Client_GetSupportedCurrencies_Call) Run(run func(ctx context.Context)) *Client_GetSupportedCurrencies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_GetSupportedCurrencies_Call) Return(_a0 []string, _a1 error) *Client_GetSupportedCurrencies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetSupportedCurrencies_Call) RunAndReturn(run func(context.Context) ([]string, error)) *Client_GetSupportedCurrencies_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
